(defun njy_func_head()
  (setq cursor (point))
  (setq next_line_start (+ cursor 1))
  (setq cur_pos next_line_start)
  (setq buffer "")
  (setq next_char "")
  ;;bug dead loop {
  (while (not (string= next_char "{"))
    (setq next_char (string (char-after cur_pos)))
    (setq cur_pos (+ cur_pos 1))
    (setq buffer (concat buffer next_char))
  )
  (setq len (- (string-width buffer) 1))
  (setq buffer (truncate-string-to-width buffer len))
)

(defun njy_func_anly(head author)
  (setq func_head_start (string-match-p "[a-zA-Z_0-9]+[ \t\n]*(" head 0))
  (setq func_head_end (string-match-p "[ \t\n]*(" head 0))
  (setq func_para_end (string-match-p ")" head func_head_end))
  (setq func_ret_start (string-match-p "\\(struct[ \t\n]+\\)\\{0,1\\}[a-zA-Z_0-9]+[ \t\n]+[a-zA-Z_0-9]+[ \t\n]*(" head 0))
  (setq func_head (truncate-string-to-width head func_head_end func_head_start))
  (setq func_ret (truncate-string-to-width head func_head_start func_ret_start))
  (setq func_para (truncate-string-to-width head func_para_end (+ func_head_end 1)))
  (setq para_list (split-string func_para ","))
  (setq tmp_list para_list)
  (setq lcnt 0)
  (insert "\n/* function name:" func_head "\n")
  (insert "** return value:" func_ret "\n")
  (while (car tmp_list)
    (setq lcnt (+ lcnt 1))
    (setq tmp (car tmp_list))
    (setq tmp_list (cdr tmp_list))
    (insert "** param " (number-to-string lcnt) " :" tmp "\n")
  )
  (insert "** desc:\n")
  (insert "** author: " author "\n")
  (insert "** " (current-time-string) "*/")
)

(defun comm (author)
  (setq head (njy_func_head))
  (njy_func_anly head author)
)

(defun acomm ()
  "comment"
  (interactive)
  (comm "施辉煌")
)

(global-set-key (kbd "C-]") 'gtags-find-tag)
(global-set-key (kbd "C-t") 'gtags-pop-stack)
(global-set-key (kbd "C-l") 'global-linum-mode)
(global-set-key (kbd "C-1") 'acomm)
